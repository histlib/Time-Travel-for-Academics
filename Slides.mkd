% Time-Travel for Academics
% Jacob Levernier
% May 18, 2015

# Get your digital life in order, and protect yourself from yourself

<div class="notes">
The point of this talk is to...
"Protect yourself from yourself" means to not have to worry about mistakes that you might make in the future, or about decisions (e.g., to delete something) that you made in the past.
</div>

<div class="notes">
This presentation is meant to be used with reveal.js (which you need to download and place in the same directory as these slides). The slides are generated with [Pandoc](http://pandoc.org/demo/example9/producing-slide-shows-with-pandoc.html):  

pandoc -t dzslides -i -s Slides.mkd -o Slides_Build.html --slide-level 2 --css reveal.js/css/theme/white.css

(-i is "incremental" mode for lists. --slide-level sets the header level that should trigger new slides)

(Note that per [here](https://github.com/jgm/pandoc-templates/pull/78), you may need to tempoararily change the css and js locations to not include ".min" in the name (or copy them and rename them with ".min").

</div>

##  

![[PHD Comics](http://www.phdcomics.com/comics/archive/phd101212s.gif)](images/phd_comics_version_control_101212s.gif)

## What to do?

Well...

* **Dropbox** 
	* <span class="fragment highlight-green">Saves (limited) versions of files</span>
	* <span class="fragment highlight-red">No concurrent editing</span>
	* <span class="fragment highlight-red">Doesn't show what was changed between different versions, or why</span>
* **Word Documents**
	* <span class="fragment highlight-red">Passing around a document makes it hard to sync files and to keep track of which versions are based on which others.</span>
* **Google Docs**
	* <span class="fragment highlight-green">Nice collaborative editing with versions</span>
	* <span class="fragment highlight-green">Useful for writing manuscripts</span>
	* <span class="fragment highlight-red">No/Limited offline access to files</span>
	* <span class="fragment highlight-red">Not suited for editing code and analyses</span>

<div class="notes">
**Dropbox** *does* save limited versions of files, but doesn't allow two people to edit files at once, and doesn't show what was changed between different versions, or why.

Saving seperate versions of files (or passing around a **Word Document** makes it hard to sync files or keep track of which versions are based on which others.

Using **Google Docs** offers nice collaborative editing with versions, but if your internet connection is down, you have no or limited access to files. And while Docs are fine for writing manuscripts, they're not so good for editing code and analyses.
</div>

# Git

##  

![[GotCredit.com, CC-BY](https://www.flickr.com/photos/jakerust/16836495381/)](images/insurance_keyboard.jpg)

## How it works

##  

<div style="height:300px;">![](images/apple-logo-grey.png) ![](images/apple_time_machine_logo.png)</div>

<div class="notes">
Note: Following [this site](http://smallbusiness.chron.com/fair-use-logos-2152.html), Fair Use allows for the reuse of logos if the use is only for identification purposes (e.g., in a newspaper to identify the company the article is about).
</div>

##  

-how it plays (nice, or otherwise) with common file types — doc, ppt, xls, csv, txt, R. does it handle videos?
-which file types it is possible and/or easy to have version control
-permissions — possible to keep private or is it automatically public?
-skills needed / learning curve— eg could freshman undergrad with not a lot of computer use expertise be able to learn it easily?
-practicalities — how to download other people’s materials, how to upload our own

# Real-World Examples

## Code Editing

## Manuscript Writing

## The Basic Workflow

1. Make git aware of the files you want to track  
	<span class="fragment">`git init`</span>
	<span class="fragment">, `git add`</span>
	<span class="fragment">, `git clone`</span>
1. Take a snapshot ("commit") whenever you do something. Add a commit message.  
	<span class="fragment">`git commit --message "I deleted the first part of the Introduction,`  
	`but added new citations to the Literature Review."`</span>
1. Do your work!  
	<span class="fragment">As needed, use `git log`</span>
	<span class="fragment">, `git diff`</span>
	<span class="fragment">, and `git checkout`</span>

# The Command Line

## The Bare Essentials

* `ls` = **l**i**s**t files in a folder.
* `cd` = "Change Directory"
* `man [command]` = "Show me the manual for this command."
	* For example, `man ls` will show and explain all of `ls`'s options.
	* `ls -a` will show hidden files (like the `.git` directory!)
	* `ls -l` will show the files in a list format (with each file on one line)
* This slide is to help you use Git at a basic level. <span class="fragment highlight-red">Do not use command-line commands that you don't know.</span> The command line doesn't ask "Are you sure?"


# GitEye

## `git init`

## `git status`

## `git add`

## `git commit -m "Reminder..."`

## `git log`

## `git checkout`

## `git diff`

# GitHub and Related Services

## What is GitHub?

* See also BitBucket

## Public vs. Private

## `git clone`

## `git push`

## `git pull`

## Branches

## The Reference Log (`git reflog`)
